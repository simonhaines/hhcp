Code, Language and the Abyss: A History of Human⇄Computer Programming

* 001 The first program

** Jaquard loom

http://www.arthurchandler.com/napoleonic-expositions
The year is 1801 and the 2nd Exposition des produits de l'industrie française (the parochial aim of showcasing national genius, enterprise) is taking place in Paris in the courtyard of the Louvre. (Context: What else happened that year? Industrial revolution? Darwin? Dickens? Thomas Jefferson sworn in as 3rd President of US, Britain and France continue the French Revolutionary Wars, a prelude to the Napoleonic wars, Napoleon is not yet crowned emporer) Gold medals were awarded to displays of fine, elaborately-engineered clocks, furniture, pottery. September 24: Joseph Marie Jacquard, a sometime weaver and straw hat maker from Lyon only won a bronze. It was noted the loom replaces a weaving worker, leading to threats against his life.

Within 5 years, the government had recognised the importance of the loom, the advantage in weaving technology and the amount and quality and intricacy of the weaving it afforded, that they took posession of the patent, awarding Jaquard a pension for life, and within 10 years there were 11000 looms in France.

It took Jacquard several more years to perfect the device and make it commercially successful.

From: http://theinstitute.ieee.org/tech-history/technology-history/the-jacquard-loom-a-driver-of-the-industrial-revolution
How it worked: Jacquard did not invent a whole new loom but a head that attaches to the loom and allows the weaving machine to create intricate patterns. Thus, any loom that uses the attachment is called a Jacquard loom.

The state-of the art loom at that time was one in which the harnesses holding the threads were raised or lowered by foot pedals on a treadle, leaving the weaver free to operate the machine with his hands. The Jacquard loom, in contrast, was controlled by a chain of punch cards laced together in a sequence. Multiple rows of holes were punched on each card, with one complete card corresponding to one row of the design. Chains of cards allowed sequences of any length to be constructed, not limited by the cards’ size.

Each hole position in the card corresponded to a hook, which could either be raised or lowered depending on whether the hole was punched. The hook raised or lowered the harness that carried and guided the thread. The sequence of raised and lowered threads created the pattern. A hook could be attached to a number of threads to create a continuous, intricate design.

Scott Berkun: "All ideas are made of other ideas"
https://scottberkun.com/2011/ideas-are-made-of-other-ideas/

** Lady Ada

From 'Parsing: a timeline' (link below)
In her translator's note on an article on Babbage's computer, Ada Lovelace becomes the first person to clearly distinguish programming a computer (software) as a separate field from building the computer itself (hardware).[1] Ada is also the first to think of software in linguistic terms -- she originates the idea that, in writing software, we communicate with the computer, and that the means that we use to do that is a "language".[2]

A new, a vast, and a powerful language is developed for the future use of analysis, in which to wield its truths so that these may become of more speedy and accurate practical application for the purposes of mankind than the means hitherto in our possession have rendered possible. Thus not only the mental and the material, but the theoretical and the practical in the mathematical world, are brought into more intimate and effective connexion with each other.[3]


* 002 The machine and its code

** Alan Turing

The tape machine. Turing completeness.

** John von Neumann

EDVAC, the von Neumann architecture, Harvard architecture

First Draft of a Report on the EDVAC
https://www.wiley.com/legacy/wileychi/wang_archi/supp/appendix_a.pdf

As well as identifying the major components (logical, arithmetical, memory, i/o, clock, etc), proposes use of vacuum tubes as gates/triggers and thus a binary system for representing digits. Also parallel processing for multiplication etc. two's complement: "the sign plays the role of the digit farthest left".

also introduced the notion of registers for the hardware/software interface, such as the output of the arithmetic unit.

for those following along at home, the bit about programming comes right at the end.

14.1 maybe first use of the word code? "It is therefore our immediate task to provide a list of the orders which control the device, i.e. to describe the code to be used in the device, and to define the mathematical and logical meaning and the operational significance of its code words." orders received come from memory: stored code.

four classes of orders: carry out one of the 10 specific operations (eg. +-/*sqrt etc, primitives?); transfer a number from one place to another (load/store); transfer connection with memory to another place (jump or shift PC); control I/O.

chapter 10: the code. mixes numbers and 'orders' together (delineated by the first bit: 0 = number, 1 = order)

instruction packing and decoding: the first mnemonics. immediate mode load of the next number (cf transient/permanent jump).

table at the end of end of section 15 contains the first nascent machine code mnemonics.

** Kathleen Booth (assembler) & David Wheeler
Ties in to the von Neumann machine
https://hackaday.com/2018/08/21/kathleen-booth-assembling-early-computers-while-inventing-assembly/

* The creators series
Looking at creators of multiple languages over their lifetime. What can we see of their philosophy to programming in the different lanuages they write?
** Nicklaus Wirth
Pascal, Modula 2, Oberon, any earlier?
** Lars Bak
BETA language (successor to Simula67), Self, (Strongtalk), (HotSpot), (v8), Dart, Toit (IOT platform) -- YouTube, CurryOn! London, 2019
Heavily favours object orientation environment
** Anders Hejlsberg
Turbo Pascal, Visual Basic?, C#, TypeSript
** Honorouble mentions: K&R
C, Awk, Go

* C
** History of C ​http://www.bell-labs.com/usr/dmr/www/chist.html
c.f. the origin of printf and its impact on programming/debugging:
 because the language could not live in isolation, the prototypes for the modern libraries were developed. In particular, Lesk wrote a `portable I/O package' [Lesk 72] that was later reworked to become the C `standard I/O' routines

* Links

** Graphs and charts of language history

'Parsing: a timeline'
https://jeffreykegler.github.io/personal/timeline_v3

Programming Language Network (interactive)
https://fatiherikli.github.io/programming-language-network/

Computer Languages Timeline
https://www.levenez.com/lang/

Diagram and History of Programming Languages
http://rigaux.org/language-study/diagram.html

The Language List
https://web.archive.org/web/20160506170543/http://people.ku.edu/~nkinners/LangList/Extras/langlist.htm

** Lists of programming languages
https://codelani.com/lists/languages.html
A list of 3500+ languages

* Unclassified 

The tapestry of advanced language implementation work is a very rich and interconnected one, the weaving of which is is an incredibly interesting task that can keep you happily occupied for a lifetime.
Olin Shivers, History of T

"We revise factual history as we learn more about the past, and we alter our sense of how the past was in accordance."
William Gibson, https://lareviewofbooks.org/article/tracking-realitys-fuckedness-quotient-an-interview-with-william-gibson/

* Theme
AudioMasher: https://audiomasher.org/learn
# store melody in a table
_seq "0 5 0 4 0 3 5 0 3 0 8 5 3 8 5 3 0 7" gen_vals

# create beat and half-beat triggers
_half var _beat var
4 metro _half set
_half get 2 0 tdiv _beat set

# play melody with a sine wave
# mtof controls volume (amplitude)
(_half get 0 _seq tseq 70 +) mtof 0.2 sine

# apply envelopes on beats and half-beats
_half get 0.001 0.1 0.2 tenvx *
_beat get 0.020 0.9 0.4 tenvx *

# add delay
dup (0.5 (4 inv) delay) (0.4 *) +
